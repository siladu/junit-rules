{"name":"junit-rules","tagline":"A collection of useful JUnit rules from Unruly's codebases","body":"\r\n## Install from Maven Central\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>co.unruly</groupId>\r\n    <artifactId>junit-rules</artifactId>\r\n    <version>1.0</version>\r\n</dependency>\r\n```\r\n\r\n## Ignore tests until a certain date.\r\n\r\nThis allows you to write an acceptance/integration test before implementing a feature, and integrate it into your codebase before the implementation is complete.\r\n\r\n```java\r\n@Rule\r\nIgnoreUntilRule rule = new IgnoreUntilRule();\r\n\r\n@IgnoreUntil(\"2014-10-30\")\r\n@Test\r\npublic void example_test_ignored_until_a_date() {\r\n\r\n}\r\n```\r\n\r\n## Quarantine non-deterministic tests\r\n\r\n```java\r\n@Rule QuarantineRule rule = new QuarantineRule();\r\n\r\n@NonDeterministic(retries=3)\r\npublic void some_sporadically_failing_test() {\r\n\r\n}\r\n```\r\n\r\nQuarantineRule supports a functional interface called QuarantineRuleLogger as a constructor argument for additional logging capabilities. For example, we email ourselves failures so it's harder to ignore.\r\n\r\n```java\r\n@Rule QuarantineRule rule = new QuarantineRule(msg -> System.err.println(msg));\r\n```\r\n\r\n## Make sure tests pass reliably\r\n\r\nWe use this to diagnose tests as being non-deterministic. To run each test 10 times:\r\n\r\n```java\r\n@Rule ReliabilityRule rule = new ReliabilityRule(10);\r\n```\r\n\r\n","google":"UA-54623334-2","note":"Don't delete this file! It's used internally to help with page regeneration."}